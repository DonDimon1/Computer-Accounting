void computerData::existingPC() { // Функция помощника конструктора для существующего в базе компьютера
    // Здесь мы достаём информацию из БД о существующем компе используюя индекс в таблице.
    QSqlQuery *query = new QSqlQuery(MainWindow::db);             // Инициализация запроса
    // Запрос
    query->prepare("SELECT * FROM MainTab WHERE ID = :ID"); // Подготавливаем запрос
    query->bindValue(":ID", ID); // Вставляем в запрос нужную нам строку
    if(!query->exec()) { // Запрашиваем
        qDebug() << "Не удалось подключиться к таблице: MainTab";
        return;
    }
    if(query->next()){ // Обрабатываем результат запроса и присваиваем полям значения
        ui->label_ThisID->setText(query->value("ID").toString()); // Присваиваем полю label_ID на форме computerdata значение ID
        ui->dateTimeEdit_LastChange->setDateTime(query->value("LastChange").toDateTime());
        ui->dateEdit_YearOfRelease->setDate(QDate(query->value("YearOfRelease").toInt(),1,1));
        ui->lineEdit_SerialNumber->setText(query->value("SerialNumber").toString());
        ui->lineEdit_Warranty->setText(query->value("Warranty").toString());
    }
    query->clear(); // Очищаем запрос
}








void computerData::defunctPC() { // Функция помощник конструктора для НЕ существующего в базе компьютера
    // Здесь мы добавляем первую информацию о компьютере в карточку компьютера. Пользователь может её изменять.
    compInfo comp; //Объект класса compInfo для определения всех характеристик компьютера


//    // Определяем данные для таблицы Основная информация
//    QStandardItemModel* basicInfModel =  new QStandardItemModel(1, 11); // 1 строки, 11 столбцов
//    // Установка заголовков таблицы
//    basicInfModel->setHeaderData(0, Qt::Horizontal, "Дата заполнения карточки");
//    basicInfModel->setHeaderData(1, Qt::Horizontal, "Имя компьютера");
//    basicInfModel->setHeaderData(2, Qt::Horizontal, "ОС");
//    basicInfModel->setHeaderData(3, Qt::Horizontal, "Разрядность ОС");
//    basicInfModel->setHeaderData(4, Qt::Horizontal, "Номер ОИТ");
//    basicInfModel->setHeaderData(5, Qt::Horizontal, "Отдел");
//    basicInfModel->setHeaderData(6, Qt::Horizontal, "Пользователь");
//    basicInfModel->setHeaderData(7, Qt::Horizontal, "Антивирус");
//    basicInfModel->setHeaderData(8, Qt::Horizontal, "Статус эксплуатации");
//    basicInfModel->setHeaderData(9, Qt::Horizontal, "Пароль БИОС");
//    basicInfModel->setHeaderData(10, Qt::Horizontal, "Доп. Коментарии");
//    //Установка стандартных значений
//    basicInfModel->setItem(0, 0, new QStandardItem("")); // Стандартная дата заполнения карточки
//    basicInfModel->setItem(0, 1, new QStandardItem(comp.GetComputerName_())); // Получаем имя компьютера
//    basicInfModel->setItem(0, 2, new QStandardItem(comp.GetOsVersionName())); // Получаем ОС компьютера
//    basicInfModel->setItem(0, 3, new QStandardItem(comp.GetOsBitWidth())); // Получаем разрядность ОС
//    basicInfModel->setItem(0, 4, new QStandardItem("")); // Стандартный номер ОИТ
//    basicInfModel->setItem(0, 5, new QStandardItem("")); // Стандартный отдел
//    basicInfModel->setItem(0, 6, new QStandardItem(comp.GetUserName_())); // Получаем имя пользователя
//    basicInfModel->setItem(0, 7, new QStandardItem("")); // Стандартный антивирус
//    basicInfModel->setItem(0, 8, new QStandardItem("")); // Стандартный статус эксплуатации
//    basicInfModel->setItem(0, 9, new QStandardItem("")); // Стандартный пароль БИОС
//    basicInfModel->setItem(0, 10, new QStandardItem("")); // Стандартные доп. коментарии
//    ui->tableViewBottom_1->setModel(basicInfModel); // Устанавливаем первой таблице модель basicInfModel
//    // Устанавливаем нередактируемые поля
//    basicInfModel->item(0, 0)->setFlags(basicInfModel->item(0, 0)->flags() & ~Qt::ItemIsEditable);


//    // Определяем данные для таблицы Железо и периферия
//    QStandardItemModel* hardware =  new QStandardItemModel(1, 22);
//    // Установка заголовков таблицы
//    hardware->setHeaderData(0, Qt::Horizontal, "Дата заполнения карточки");
//    hardware->setHeaderData(1, Qt::Horizontal, "CPU");
//    hardware->setHeaderData(2, Qt::Horizontal, "CPU Производитель");
//    hardware->setHeaderData(3, Qt::Horizontal, "CPU Частота");
//    hardware->setHeaderData(4, Qt::Horizontal, "CPU Кол-во ядер");
//    hardware->setHeaderData(5, Qt::Horizontal, "Мат.Плата");
//    hardware->setHeaderData(6, Qt::Horizontal, "Производитель Мат.Платы");
//    hardware->setHeaderData(7, Qt::Horizontal, "Видеокарта");
//    hardware->setHeaderData(8, Qt::Horizontal, "Видеопамять");
//    hardware->setHeaderData(9, Qt::Horizontal, "Тип видеоадаптера");
//    hardware->setHeaderData(10, Qt::Horizontal, "ОЗУ");
//    hardware->setHeaderData(11, Qt::Horizontal, "ОЗУ Общее кол-во памяти");
//    hardware->setHeaderData(12, Qt::Horizontal, "ОЗУ Тип DDR");
//    hardware->setHeaderData(13, Qt::Horizontal, "ОЗУ Общее кол-во слотов");
//    hardware->setHeaderData(14, Qt::Horizontal, "ОЗУ Использовано слотов");
//    hardware->setHeaderData(15, Qt::Horizontal, "HDD & SSD");
//    hardware->setHeaderData(16, Qt::Horizontal, "Общее объём памяти");
//    hardware->setHeaderData(17, Qt::Horizontal, "Кол-во дисков");
//    hardware->setHeaderData(18, Qt::Horizontal, "Монитор");
//    hardware->setHeaderData(19, Qt::Horizontal, "Принтер");
//    hardware->setHeaderData(20, Qt::Horizontal, "Наличие дисковода");
//    hardware->setHeaderData(21, Qt::Horizontal, "Блок питания");
//    //Установка стандартных значений
//    hardware->setItem(0, 0, new QStandardItem("")); // Стандартная дата заполнения карточки
//    hardware->setItem(0, 1, new QStandardItem(comp.GetCPUName())); // Получаем CPU
//    hardware->setItem(0, 2, new QStandardItem("")); // Стандартный производитель CPU
//    hardware->setItem(0, 3, new QStandardItem(comp.GetCPUFrequency())); // Получаем частоту CPU
//    hardware->setItem(0, 4, new QStandardItem(comp.GetCPUNumberCore())); // Получаем кол-во ядер
//    hardware->setItem(0, 5, new QStandardItem(comp.GetBoardName())); // Получаем Мат.Плату
//    hardware->setItem(0, 6, new QStandardItem(comp.GetBoardManufacturer())); // Получаем производителя Мат.Платы
//    hardware->setItem(0, 7, new QStandardItem(comp.GetGPUName())); // Получаем видеокарту
//    //hardware->setItem(0, 7, new QStandardItem(comp.GetGPUMemSize());
//    hardware->setItem(0, 8, new QStandardItem(QString::number(comp.GetGPUMemSize()))); // Получаем видеопамять
//    hardware->setItem(0, 9, new QStandardItem("")); // Стандартный тип адаптера
//    QString RAMStr = ""; // Строка с параметрами ОЗУ
//    QString typeDDRStr = ""; // Строка с типом ddr
//    WORD numRAM = comp.vecMemory.size(); // Кол-во плашек памяти
//    for(UINT i = 0; i < numRAM; ++i){ // Проходим по всем плашкам
//        RAMStr += QString::number(i + 1) + ") " + comp.vecMemory[i].Manufacturer + " "; // Создаём строку вывода
//        RAMStr += QString::number(comp.vecMemory[i].Size) + "Гц, ";
//        if(!typeDDRStr.contains("DDR")) // Записываем тип DDR памяти
//            typeDDRStr = comp.vecMemory[i].MemoryType;
//    }
//    hardware->setItem(0, 10, new QStandardItem(RAMStr)); // Получаем ОЗУ
//    hardware->setItem(0, 11, new QStandardItem(QString::number(comp.GetMemorySize()))); // Получаем общее количество ОЗУ
//    hardware->setItem(0, 12, new QStandardItem(typeDDRStr)); // Получаем тип DDR
//    hardware->setItem(0, 13, new QStandardItem(QString::number(comp.TotalRAMSlots))); // Получаем Общее кол-во слотов
//    hardware->setItem(0, 14, new QStandardItem(QString::number(numRAM))); // Получаем кол-во использованных слотов
//    QString driveStr = ""; // Строка с дисками
//    WORD numDrive = comp.vecDrive.size(); // Кол-во дисков
//    WORD totalCapacityDrive = 0; // Общий объём всех дисков
//    for (UINT i = 0; i < numDrive; ++i) { // Проходим по всем дискам
//        driveStr += QString::number(i + 1) + ") " + comp.vecDrive[i].Name + " "; // Создаём строку вывода
//        driveStr += QString::number(comp.vecDrive[i].Size) + "Гб, ";
//        totalCapacityDrive += comp.vecDrive[i].Size;                        // Общий объём всех дисков
//    }
//    hardware->setItem(0, 15, new QStandardItem(driveStr)); // Получаем HDD & SSD
//    hardware->setItem(0, 16, new QStandardItem(QString::number(totalCapacityDrive) + " Гб")); // Получаем общий объём дисков
//    hardware->setItem(0, 17, new QStandardItem(QString::number(numDrive))); // Получаем кол-во дисков
//    hardware->setItem(0, 18, new QStandardItem("")); // Стандартный монитор
//    hardware->setItem(0, 19, new QStandardItem("")); // Стандартный принтер
//    QString cdROM = "Нет"; // Строка CDROM
//    if(comp.GetCDROM()) cdROM = "Есть"; // Обработка наличия CDROM
//    hardware->setItem(0, 20, new QStandardItem(cdROM)); // Получить наличие дисковода
//    hardware->setItem(0, 21, new QStandardItem("")); // Стандартный блок питания
//    ui->tableViewBottom_2->setModel(hardware); // Устанавливаем второй таблице модель Hardware
//    // Устанавливаем нередактируемые поля
//    hardware->item(0, 0)->setFlags(hardware->item(0, 0)->flags() & ~Qt::ItemIsEditable);


//    // Определяем данные для таблицы Ремонт и обслуживание
//    QStandardItemModel* repair =  new QStandardItemModel(1, 4);
//    // Установка заголовков таблицы
//    repair->setHeaderData(0, Qt::Horizontal, "Дата заполнения карточки");
//    repair->setHeaderData(1, Qt::Horizontal, "Дата ремонта");
//    repair->setHeaderData(2, Qt::Horizontal, "Описание ремонта");
//    repair->setHeaderData(3, Qt::Horizontal, "Специалист");
//    ui->tableViewBottom_3->setModel(repair); // Устанавливаем 3ей таблице модель repair

//    // Определяем данные для таблицы Перемещения
//    QStandardItemModel* movements =  new QStandardItemModel(1, 6);
//    // Установка заголовков таблицы
//    movements->setHeaderData(0, Qt::Horizontal, "Дата заполнения карточки");
//    movements->setHeaderData(1, Qt::Horizontal, "Прошлый пользователь");
//    movements->setHeaderData(2, Qt::Horizontal, "Новый пользователь");
//    movements->setHeaderData(3, Qt::Horizontal, "Прошлый отдел");
//    movements->setHeaderData(4, Qt::Horizontal, "Новый отдел");
//    movements->setHeaderData(5, Qt::Horizontal, "Заметки");
//    ui->tableViewBottom_4->setModel(movements); // Устанавливаем 4ой таблице модель movements
}






void computerData::on_pushButton_Save_clicked() // Сохраняем данные в БД
{
    QSqlQuery *query = new QSqlQuery(MainWindow::db); // Инициализация запроса сохранения в БД
    // Таблица MainTab
    if(computerData::ID){ // Если компьютер уже существует
        query->prepare("UPDATE MainTab SET LastChange = CURRENT_TIMESTAMP, YearOfRelease = :YearOfRelease, SerialNumber = :SerialNumber,"
                       "Warranty = :Warranty WHERE ID = :ID"); // Подготавливаем запрос
        query->bindValue(":ID", computerData::ID); // Заполняем значение поля ID
    }
    else { // Если компьютер новый
        query->prepare("INSERT INTO MainTab (ID, LastChange, YearOfRelease, SerialNumber, Warranty ) "
                       "VALUES(:ID, CURRENT_TIMESTAMP, :YearOfRelease, :SerialNumber, :Warranty)"); // Подготавливаем запрос
        query->bindValue(":ID", ++MainWindow::computerCount); // Заполняем значение поля ID
    }

    query->bindValue(":YearOfRelease", ui->dateEdit_YearOfRelease->text());
    query->bindValue(":SerialNumber", ui->lineEdit_SerialNumber->text());
    query->bindValue(":Warranty", ui->lineEdit_Warranty->text());
    if(!query->exec()) { // Запрашиваем
        qDebug() << "При сохранении данных формы не удалось подключиться к таблице: MainTab";
        return;
    }
    query->clear(); // Очищаем запрос




    // Таблица BasicInf
//    query->prepare("INSERT INTO BasicInf (ID, LastChange, ComputerName, OS, bitWidth, NumberOIT, Department, User, Antivirus, Status, BiosPassword, Comments) "
//                   "VALUES (:ID, CURRENT_TIMESTAMP, :ComputerName, :OS, :bitWidth, :NumberOIT, :Department, :User, :Antivirus, :Status, :BiosPassword, :Comments)");
//    query->bindValue(":ID", MainWindow::computerCount); // Заполняем значение поля ID
//    //query->bindValue(":ID", MainWindow::computerCount); // Заполняем значение поля ID
//    if(!query->exec()) { // Запрашиваем
//        qDebug() << "Не удалось подключиться к таблице: BasicInf";
//        return;
//    }
}




/////////////////////////////////////////////////////////////////////////
через модель

//https://stackoverflow.com/questions/25127302/how-to-add-tabs-dynamically-in-a-qt
#include "computerdata.h"
#include "ui_computerdata.h"

computerData::computerData(QWidget *parent, UINT ID) : // Конструктор открытия уже существующего комьютера
    QWidget(parent),
    ui(new Ui::computerData)
{
    ui->setupUi(this);
    // Создаём все нужные модели
    mainTabModel = new QSqlTableModel(this, MainWindow::db);

    connect(ui->pushButton_Save, &QPushButton::clicked, this, &computerData::sendUpdateSignal); // Конект для обновления mainWindow
    computerData::ID = ID; // Если ID == 0 то, компа нет в базе, иначе есть
    if(computerData::ID){ // Если мы открываем уже существующий в базе компьютер
        computerData::existingPC(); // Вызов функции помощника конструктора для существующего в базе компьютера
    } else{ // Если мы открываем ещё НЕ существующий в базе компьютер
        computerData::defunctPC(); // Вызов функции помощника конструктора для НЕсуществующего в базе компьютера
    }
}

void computerData::existingPC() { // Функция помощника конструктора для существующего в базе компьютера
    // Здесь мы достаём информацию из БД о существующем компе используюя индекс в таблице.
    mainTabModel->setTable("MainTab"); // Устанавливает таблицу базы данных, с которой работает модель.
    mainTabModel->setEditStrategy(QSqlTableModel::OnManualSubmit); // Стратегия редактирования при которой изменения сохр. в бд только при вызове submitAll()
    QString filterID = "ID = " + QString::number(ID); // Собираем строку фильтра
    mainTabModel->setFilter(filterID); // Сортируем модель по ID
    mainTabModel->select(); // Заполняет модель данными из таблицы, которая была задана через setTable()

    // Присваиваем полям значения
    ui->label_ThisID->setText(mainTabModel->data(mainTabModel->index(0, mainTabModel->fieldIndex("ID"))).toString()); // Присваиваем полю label_ID на форме computerdata значение ID
    ui->dateTimeEdit_LastChange->setDateTime(mainTabModel->data(mainTabModel->index(0, mainTabModel->fieldIndex("LastChange"))).toDateTime());
    ui->dateEdit_YearOfRelease->setDate(QDate(mainTabModel->data(mainTabModel->index(0,mainTabModel->fieldIndex("YearOfRelease"))).toInt(),1,1));
    ui->lineEdit_SerialNumber->setText(mainTabModel->data(mainTabModel->index(0, mainTabModel->fieldIndex("SerialNumber"))).toString());
    ui->lineEdit_Warranty->setText(mainTabModel->data(mainTabModel->index(0, mainTabModel->fieldIndex("Warranty"))).toString());
}

void computerData::defunctPC() { // Функция помощник конструктора для НЕ существующего в базе компьютера
    // Здесь мы добавляем первую информацию о компьютере в карточку компьютера. Пользователь может её изменять.
    compInfo comp; //Объект класса compInfo для определения всех характеристик компьютера

    class MySqlTableModel : public QSqlTableModel { // Для запрета редактирования колонки с датой нужно переопределить класс QSqlTableModel
    public:
        MySqlTableModel(QObject *parent = nullptr, QSqlDatabase db = QSqlDatabase()) :
            QSqlTableModel(parent, db) {}

        Qt::ItemFlags flags(const QModelIndex &index) const override { // Переопределяем условие редактирования
            QString columnName = headerData(index.column(), Qt::Horizontal).toString(); // Узнаём название текущей колонки
            if (columnName == "Дата заполнения карточки") { // Если название совпадает с название нередактируеммой колонки то
                return Qt::ItemIsSelectable | Qt::ItemIsEnabled; // Запрещаем редактирование
            } else {
                return QSqlTableModel::flags(index);
            }
        }
    };

    // Главная таблица
    mainTabModel->setFilter("ID = 0"); // Сортируем модель по несуществующему ID
    mainTabModel->insertRow(mainTabModel->rowCount()); // Добавляем новую строку в которую будем добавлять инфу

    // Определяем данные для таблицы Основная информация
    MySqlTableModel *basicInfModel = new MySqlTableModel(this, MainWindow::db);
    basicInfModel->setTable("basicInf"); // Устанавливает таблицу базы данных, с которой работает модель.
    basicInfModel->setEditStrategy(QSqlTableModel::OnManualSubmit); // Стратегия редактирования при которой изменения сохр. в бд только при вызове submitAll()
    basicInfModel->setFilter("ID = 0"); // Сортируем модель по несуществующей строке
    basicInfModel->select(); // Заполняет модель данными из таблицы, которая была задана через setTable()

    // Установка заголовков таблицы
    basicInfModel->setHeaderData(basicInfModel->fieldIndex("LastChange"), Qt::Horizontal, "Дата заполнения карточки"); // Меняем заголовки на русский
    basicInfModel->setHeaderData(basicInfModel->fieldIndex("ComputerName"), Qt::Horizontal, "Имя компьютера");
    basicInfModel->setHeaderData(basicInfModel->fieldIndex("OS"), Qt::Horizontal, "ОС");
    basicInfModel->setHeaderData(basicInfModel->fieldIndex("bitWidth"), Qt::Horizontal, "Разрядность ОС");
    basicInfModel->setHeaderData(basicInfModel->fieldIndex("NumberOIT"), Qt::Horizontal, "Номер ОИТ");
    basicInfModel->setHeaderData(basicInfModel->fieldIndex("Department"), Qt::Horizontal, "Отдел");
    basicInfModel->setHeaderData(basicInfModel->fieldIndex("User"), Qt::Horizontal, "Пользователь");
    basicInfModel->setHeaderData(basicInfModel->fieldIndex("Antivirus"), Qt::Horizontal, "Антивирус");
    basicInfModel->setHeaderData(basicInfModel->fieldIndex("Status"), Qt::Horizontal, "Статус эксплуатации");
    basicInfModel->setHeaderData(basicInfModel->fieldIndex("BiosPassword"), Qt::Horizontal, "Пароль БИОС");
    basicInfModel->setHeaderData(basicInfModel->fieldIndex("Comments"), Qt::Horizontal, "Доп. Коментарии");
    //Установка стандартных значений
    basicInfModel->insertRow(0); // Вставить новую строку в конец таблицы
    basicInfModel->setData(basicInfModel->index(0, basicInfModel->fieldIndex("ComputerName")), comp.GetComputerName_()); // Получаем имя компьютера
    basicInfModel->setData(basicInfModel->index(0, basicInfModel->fieldIndex("OS")), comp.GetOsVersionName()); // Получаем ОС компьютера
    basicInfModel->setData(basicInfModel->index(0, basicInfModel->fieldIndex("bitWidth")), comp.GetOsBitWidth()); // Получаем разрядность ОС
    basicInfModel->setData(basicInfModel->index(0, basicInfModel->fieldIndex("User")), comp.GetUserName_()); // Получаем разрядность ОС

    ui->tableViewBottom_1->setModel(basicInfModel); // Устанавливаем модель
    ui->tableViewBottom_1->setColumnHidden(basicInfModel->fieldIndex("ID"), true); // Скрываем колонку с ID
}

computerData::~computerData() // Деструктор
{
    delete ui;
}

void computerData::on_pushButton_Save_clicked() // Сохраняем данные в БД
{
    // Таблица MainTab
    if(!computerData::ID) { // Если компьютера ещё нет в базе
        computerData::ID = ++MainWindow::computerCount; // Присваиваем новый ID
        mainTabModel->setData(mainTabModel->index(0, mainTabModel->fieldIndex("ID")), computerData::ID); // Заполняем значение поля ID
        ui->label_ThisID->setText(QString::number(computerData::ID)); // Показываем ID на форме
    }
    mainTabModel->setData(mainTabModel->index(0, mainTabModel->fieldIndex("LastChange")), QDateTime::currentDateTime()); // Заполняем значение поля последнего изменения
    mainTabModel->setData(mainTabModel->index(0, mainTabModel->fieldIndex("YearOfRelease")), ui->dateEdit_YearOfRelease->text()); // Заполняем значение поля последнего изменения
    mainTabModel->setData(mainTabModel->index(0, mainTabModel->fieldIndex("SerialNumber")), ui->lineEdit_SerialNumber->text()); // Заполняем значение поля последнего изменения
    mainTabModel->setData(mainTabModel->index(0, mainTabModel->fieldIndex("Warranty")), ui->lineEdit_Warranty->text()); // Заполняем значение поля последнего изменения
    if(!mainTabModel->submitAll()) { // Сохраняем данные в БД
        qDebug() << "Ошибка сохранения в БД таблицы MainTab";
        return;
    }
}


















//////////////////////Запутался

//https://stackoverflow.com/questions/25127302/how-to-add-tabs-dynamically-in-a-qt
#include "computerdata.h"
#include "ui_computerdata.h"

class computerData::MySqlTableModel : public QSqlTableModel { // Для запрета редактирования колонки с датой нужно переопределить класс QSqlTableModel
public:
    MySqlTableModel(QObject *parent = nullptr, QSqlDatabase db = QSqlDatabase()) :
        QSqlTableModel(parent, db) {}

    Qt::ItemFlags flags(const QModelIndex &index) const override { // Переопределяем условие редактирования
        Qt::ItemFlags flags = QSqlTableModel::flags(index);
        QString columnName = headerData(index.column(), Qt::Horizontal).toString(); // Узнаём название текущей колонки
        // Проверяем, является ли текущая колонка "lastchange"
        if (columnName == "Дата заполнения карточки") // Замените "yourColumnNameIndex" на соответствующую функцию, которая возвращает индекс колонки по ее названию
        {
            //flags &= ~Qt::ItemIsEditable;ItemIsEnabled
            flags &= ~Qt::ItemIsEnabled;
        }

        return flags;
        // QString columnName = headerData(index.column(), Qt::Horizontal).toString(); // Узнаём название текущей колонки
        // if (columnName == "Дата заполнения карточки") { // Если название совпадает с название нередактируеммой колонки то
        //     //return Qt::ItemIsSelectable | Qt::ItemIsEnabled; // Запрещаем редактирование
        //     return QSqlTableModel::flags(index) & ~Qt::ItemIsEditable;
        // } else {
        //     return QSqlTableModel::flags(index);
        // }
    }
};

computerData::computerData(QWidget *parent, UINT ID) : // Конструктор открытия уже существующего комьютера
    QWidget(parent),
    ui(new Ui::computerData)
{
    ui->setupUi(this);
    // Создаём модели
    //basicInfModel = new QStandardItemModel(1, 11, this);
    basicInfModel = new MySqlTableModel(this, MainWindow::db); // Подключение к БД
    basicInfModel->setTable("basicInf"); // Устанавливает таблицу базы данных, с которой работает модель.
    basicInfModel->setEditStrategy(QSqlTableModel::OnManualSubmit); // Стратегия редактирования при которой изменения сохр. в бд только при вызове submitAll()

    hardware = new QStandardItemModel(1, 22, this);
    repair =  new QStandardItemModel(1, 4, this);
    movements =  new QStandardItemModel(1, 6, this);
    computerData::modelsHeaders();// Создаём моделям заголовки

    connect(ui->pushButton_Save, &QPushButton::clicked, this, &computerData::sendUpdateSignal); // Конект для обновления mainWindow
    computerData::ID = ID; // Если ID == 0 то, компа нет в базе, иначе есть
    if(computerData::ID){ // Если мы открываем уже существующий в базе компьютер
        computerData::existingPC(); // Вызов функции помощника конструктора для существующего в базе компьютера
    } else{ // Если мы открываем ещё НЕ существующий в базе компьютер
        computerData::defunctPC(); // Вызов функции помощника конструктора для НЕсуществующего в базе компьютера
    }
}

void computerData::existingPC() { // Функция помощника конструктора для существующего в базе компьютера
    // Здесь мы достаём информацию из БД о существующем компе используюя индекс в таблице.
    QSqlQuery *query = new QSqlQuery(MainWindow::db);             // Инициализация запроса
    // Запрос в таблицу MainTab
    query->prepare("SELECT * FROM MainTab WHERE ID = :ID"); // Подготавливаем запрос
    query->bindValue(":ID", ID); // Вставляем в запрос нужную нам строку
    if(!query->exec()) { // Запрашиваем
        qDebug() << "Не удалось подключиться к таблице: MainTab";
        return;
    }
    if(query->next()){ // Обрабатываем результат запроса и присваиваем полям значения
        ui->label_ThisID->setText(query->value("ID").toString()); // Присваиваем полю label_ID на форме computerdata значение ID
        ui->dateTimeEdit_LastChange->setDateTime(query->value("LastChange").toDateTime());
        ui->dateEdit_YearOfRelease->setDate(QDate(query->value("YearOfRelease").toInt(),1,1));
        ui->lineEdit_SerialNumber->setText(query->value("SerialNumber").toString());
        ui->lineEdit_Warranty->setText(query->value("Warranty").toString());
    }
    query->clear(); // Очищаем запрос

    // Считываем таблицу basicInf
    QString filterID = "ID = " + QString::number(ID); // Собираем строку фильтра
    basicInfModel->setFilter(filterID); // Сортируем модель по ID
    basicInfModel->select(); // Заполняет модель данными из таблицы, которая была задана через setTable()
    ui->tableViewBottom_1->setModel(basicInfModel); // Устанавливаем модель
    ui->tableViewBottom_1->setColumnHidden(basicInfModel->fieldIndex("ID"), true); // Скрываем колонку с ID

    // Запрос в таблицу basicInf
    // query->prepare("SELECT * FROM BasicInf WHERE ID = :ID"); // Подготавливаем запрос
    // query->bindValue(":ID", ID); // Вставляем в запрос нужную нам строки
    // if(!query->exec()) { // Запрашиваем
    //     qDebug() << "Не удалось подключиться к таблице: BasicInf";
    //     return;
    // }
    // for(int i = 0; i < query->size(); ++i) {// Проходим по всем найденным строкам

    // }
    // UINT row = 0;
    // while(query->next()) {
    //     //query->value("ID")
    //     //QStandardItem(query->value("ID").toString());
    //     basicInfModel->setItem(row, 0, QStandardItem(query->value("ID").toString()).clone());
    //     ++row;
    // }
    //ui->tableViewBottom_1->setModel(basicInfModel); // Устанавливаем первой таблице модель basicInfModel
}

void computerData::defunctPC() { // Функция помощник конструктора для НЕ существующего в базе компьютера
    // Здесь мы добавляем первую информацию о компьютере в карточку компьютера. Пользователь может её изменять.
    compInfo comp; //Объект класса compInfo для определения всех характеристик компьютера


    basicInfModel->setFilter("ID = 0"); // Сортируем модель по несуществующей строке
    basicInfModel->select(); // Заполняет модель данными из таблицы, которая была задана через setTable()
    //Установка стандартных значений
    basicInfModel->insertRow(0); // Вставить новую строку в конец таблицы
    basicInfModel->setData(basicInfModel->index(0, basicInfModel->fieldIndex("ComputerName")), comp.GetComputerName_()); // Получаем имя компьютера
    basicInfModel->setData(basicInfModel->index(0, basicInfModel->fieldIndex("OS")), comp.GetOsVersionName()); // Получаем ОС компьютера
    basicInfModel->setData(basicInfModel->index(0, basicInfModel->fieldIndex("bitWidth")), comp.GetOsBitWidth()); // Получаем разрядность ОС
    basicInfModel->setData(basicInfModel->index(0, basicInfModel->fieldIndex("User")), comp.GetUserName_()); // Получаем разрядность ОС

    ui->tableViewBottom_1->setModel(basicInfModel); // Устанавливаем модель
    ui->tableViewBottom_1->setColumnHidden(basicInfModel->fieldIndex("ID"), true); // Скрываем колонку с ID
   // Определяем данные для таблицы Основная информация
   //Установка стандартных значений
   // basicInfModel->setItem(0, 0, new QStandardItem("")); // Стандартная дата заполнения карточки
   // basicInfModel->setItem(0, 1, new QStandardItem(comp.GetComputerName_())); // Получаем имя компьютера
   // basicInfModel->setItem(0, 2, new QStandardItem(comp.GetOsVersionName())); // Получаем ОС компьютера
   // basicInfModel->setItem(0, 3, new QStandardItem(comp.GetOsBitWidth())); // Получаем разрядность ОС
   // basicInfModel->setItem(0, 4, new QStandardItem("")); // Стандартный номер ОИТ
   // basicInfModel->setItem(0, 5, new QStandardItem("")); // Стандартный отдел
   // basicInfModel->setItem(0, 6, new QStandardItem(comp.GetUserName_())); // Получаем имя пользователя
   // basicInfModel->setItem(0, 7, new QStandardItem("")); // Стандартный антивирус
   // basicInfModel->setItem(0, 8, new QStandardItem("")); // Стандартный статус эксплуатации
   // basicInfModel->setItem(0, 9, new QStandardItem("")); // Стандартный пароль БИОС
   // basicInfModel->setItem(0, 10, new QStandardItem("")); // Стандартные доп. коментарии
   // ui->tableViewBottom_1->setModel(basicInfModel); // Устанавливаем первой таблице модель basicInfModel
   // // Устанавливаем нередактируемые поля
   // basicInfModel->item(0, 0)->setFlags(basicInfModel->item(0, 0)->flags() & ~Qt::ItemIsEditable);


   // Определяем данные для таблицы Железо и периферия
   //Установка стандартных значений
   hardware->setItem(0, 0, new QStandardItem("")); // Стандартная дата заполнения карточки
   hardware->setItem(0, 1, new QStandardItem(comp.GetCPUName())); // Получаем CPU
   hardware->setItem(0, 2, new QStandardItem("")); // Стандартный производитель CPU
   hardware->setItem(0, 3, new QStandardItem(comp.GetCPUFrequency())); // Получаем частоту CPU
   hardware->setItem(0, 4, new QStandardItem(comp.GetCPUNumberCore())); // Получаем кол-во ядер
   hardware->setItem(0, 5, new QStandardItem(comp.GetBoardName())); // Получаем Мат.Плату
   hardware->setItem(0, 6, new QStandardItem(comp.GetBoardManufacturer())); // Получаем производителя Мат.Платы
   hardware->setItem(0, 7, new QStandardItem(comp.GetGPUName())); // Получаем видеокарту
   //hardware->setItem(0, 7, new QStandardItem(comp.GetGPUMemSize());
   hardware->setItem(0, 8, new QStandardItem(QString::number(comp.GetGPUMemSize()))); // Получаем видеопамять
   hardware->setItem(0, 9, new QStandardItem("")); // Стандартный тип адаптера
   QString RAMStr = ""; // Строка с параметрами ОЗУ
   QString typeDDRStr = ""; // Строка с типом ddr
   WORD numRAM = comp.vecMemory.size(); // Кол-во плашек памяти
   for(UINT i = 0; i < numRAM; ++i){ // Проходим по всем плашкам
       RAMStr += QString::number(i + 1) + ") " + comp.vecMemory[i].Manufacturer + " "; // Создаём строку вывода
       RAMStr += QString::number(comp.vecMemory[i].Size) + "Гц, ";
       if(!typeDDRStr.contains("DDR")) // Записываем тип DDR памяти
           typeDDRStr = comp.vecMemory[i].MemoryType;
   }
   hardware->setItem(0, 10, new QStandardItem(RAMStr)); // Получаем ОЗУ
   hardware->setItem(0, 11, new QStandardItem(QString::number(comp.GetMemorySize()))); // Получаем общее количество ОЗУ
   hardware->setItem(0, 12, new QStandardItem(typeDDRStr)); // Получаем тип DDR
   hardware->setItem(0, 13, new QStandardItem(QString::number(comp.TotalRAMSlots))); // Получаем Общее кол-во слотов
   hardware->setItem(0, 14, new QStandardItem(QString::number(numRAM))); // Получаем кол-во использованных слотов
   QString driveStr = ""; // Строка с дисками
   WORD numDrive = comp.vecDrive.size(); // Кол-во дисков
   WORD totalCapacityDrive = 0; // Общий объём всех дисков
   for (UINT i = 0; i < numDrive; ++i) { // Проходим по всем дискам
       driveStr += QString::number(i + 1) + ") " + comp.vecDrive[i].Name + " "; // Создаём строку вывода
       driveStr += QString::number(comp.vecDrive[i].Size) + "Гб, ";
       totalCapacityDrive += comp.vecDrive[i].Size;                        // Общий объём всех дисков
   }
   hardware->setItem(0, 15, new QStandardItem(driveStr)); // Получаем HDD & SSD
   hardware->setItem(0, 16, new QStandardItem(QString::number(totalCapacityDrive) + " Гб")); // Получаем общий объём дисков
   hardware->setItem(0, 17, new QStandardItem(QString::number(numDrive))); // Получаем кол-во дисков
   hardware->setItem(0, 18, new QStandardItem("")); // Стандартный монитор
   hardware->setItem(0, 19, new QStandardItem("")); // Стандартный принтер
   QString cdROM = "Нет"; // Строка CDROM
   if(comp.GetCDROM()) cdROM = "Есть"; // Обработка наличия CDROM
   hardware->setItem(0, 20, new QStandardItem(cdROM)); // Получить наличие дисковода
   hardware->setItem(0, 21, new QStandardItem("")); // Стандартный блок питания
   ui->tableViewBottom_2->setModel(hardware); // Устанавливаем второй таблице модель Hardware
   // Устанавливаем нередактируемые поля
   hardware->item(0, 0)->setFlags(hardware->item(0, 0)->flags() & ~Qt::ItemIsEditable);


   // Определяем данные для таблицы Ремонт и обслуживание
   ui->tableViewBottom_3->setModel(repair); // Устанавливаем 3ей таблице модель repair

   // Определяем данные для таблицы Перемещения
   ui->tableViewBottom_4->setModel(movements); // Устанавливаем 4ой таблице модель movements
}

computerData::~computerData() // Деструктор
{
    delete ui;
}

void computerData::on_pushButton_Save_clicked() // Сохраняем данные в БД
{
    QSqlQuery *query = new QSqlQuery(MainWindow::db); // Инициализация запроса сохранения в БД
    // Таблица MainTab
    if(computerData::ID){ // Если компьютер уже существует
        query->prepare("UPDATE MainTab SET LastChange = CURRENT_TIMESTAMP, YearOfRelease = :YearOfRelease, SerialNumber = :SerialNumber,"
                       "Warranty = :Warranty WHERE ID = :ID"); // Подготавливаем запрос
        query->bindValue(":ID", computerData::ID); // Заполняем значение поля ID
    }
    else { // Если компьютер новый
        computerData::ID = ++MainWindow::computerCount; // Присваиваем новому компьютеру ID
        query->prepare("INSERT INTO MainTab (ID, LastChange, YearOfRelease, SerialNumber, Warranty ) "
                       "VALUES(:ID, CURRENT_TIMESTAMP, :YearOfRelease, :SerialNumber, :Warranty)"); // Подготавливаем запрос
        query->bindValue(":ID", computerData::ID); // Заполняем значение поля ID
        ui->label_ThisID->setText(QString::number(computerData::ID)); // Показываем новый ID на форме
    }

    query->bindValue(":YearOfRelease", ui->dateEdit_YearOfRelease->text());
    query->bindValue(":SerialNumber", ui->lineEdit_SerialNumber->text());
    query->bindValue(":Warranty", ui->lineEdit_Warranty->text());
    if(!query->exec()) { // Запрашиваем
        qDebug() << "При сохранении данных формы не удалось подключиться к таблице: MainTab";
        return;
    }
    query->clear(); // Очищаем запрос

    // Сохраняем информацию в таблицах (basicInfModel->rowCount())
    basicInfModel->setData(basicInfModel->index(0, basicInfModel->fieldIndex("ID")), computerData::ID); // Сохраняем ID
    basicInfModel->setData(basicInfModel->index(0, 1), QDateTime::currentDateTime()); // Дата последнего изменения таблицы basicInf
    basicInfModel->submitAll(); // Сохраняем изменения в basicInf
    QString filterID = "ID = " + QString::number(computerData::ID); // Собираем строку фильтра
    basicInfModel->setFilter(filterID); // Сортируем модель по новому ID
    


}

void computerData::modelsHeaders() { // Функция для задания заголовков моделям
    // Установка заголовков таблицы basicInf
    basicInfModel->setHeaderData(basicInfModel->fieldIndex("LastChange"), Qt::Horizontal, "Дата заполнения карточки"); // Меняем заголовки на русский
    basicInfModel->setHeaderData(basicInfModel->fieldIndex("ComputerName"), Qt::Horizontal, "Имя компьютера");
    basicInfModel->setHeaderData(basicInfModel->fieldIndex("OS"), Qt::Horizontal, "ОС");
    basicInfModel->setHeaderData(basicInfModel->fieldIndex("bitWidth"), Qt::Horizontal, "Разрядность ОС");
    basicInfModel->setHeaderData(basicInfModel->fieldIndex("NumberOIT"), Qt::Horizontal, "Номер ОИТ");
    basicInfModel->setHeaderData(basicInfModel->fieldIndex("Department"), Qt::Horizontal, "Отдел");
    basicInfModel->setHeaderData(basicInfModel->fieldIndex("User"), Qt::Horizontal, "Пользователь");
    basicInfModel->setHeaderData(basicInfModel->fieldIndex("Antivirus"), Qt::Horizontal, "Антивирус");
    basicInfModel->setHeaderData(basicInfModel->fieldIndex("Status"), Qt::Horizontal, "Статус эксплуатации");
    basicInfModel->setHeaderData(basicInfModel->fieldIndex("BiosPassword"), Qt::Horizontal, "Пароль БИОС");
    basicInfModel->setHeaderData(basicInfModel->fieldIndex("Comments"), Qt::Horizontal, "Доп. Коментарии");
    /*asicInfModel->setHeaderData(0, Qt::Horizontal, "Дата заполнения карточки");
    basicInfModel->setHeaderData(1, Qt::Horizontal, "Имя компьютера");
    basicInfModel->setHeaderData(2, Qt::Horizontal, "ОС");
    basicInfModel->setHeaderData(3, Qt::Horizontal, "Разрядность ОС");
    basicInfModel->setHeaderData(4, Qt::Horizontal, "Номер ОИТ");
    basicInfModel->setHeaderData(5, Qt::Horizontal, "Отдел");
    basicInfModel->setHeaderData(6, Qt::Horizontal, "Пользователь");
    basicInfModel->setHeaderData(7, Qt::Horizontal, "Антивирус");
    basicInfModel->setHeaderData(8, Qt::Horizontal, "Статус эксплуатации");
    basicInfModel->setHeaderData(9, Qt::Horizontal, "Пароль БИОС");
    basicInfModel->setHeaderData(10, Qt::Horizontal, "Доп. Коментарии");*/

    // Установка заголовков таблицы hardware
    hardware->setHeaderData(0, Qt::Horizontal, "Дата заполнения карточки");
    hardware->setHeaderData(1, Qt::Horizontal, "CPU");
    hardware->setHeaderData(2, Qt::Horizontal, "CPU Производитель");
    hardware->setHeaderData(3, Qt::Horizontal, "CPU Частота");
    hardware->setHeaderData(4, Qt::Horizontal, "CPU Кол-во ядер");
    hardware->setHeaderData(5, Qt::Horizontal, "Мат.Плата");
    hardware->setHeaderData(6, Qt::Horizontal, "Производитель Мат.Платы");
    hardware->setHeaderData(7, Qt::Horizontal, "Видеокарта");
    hardware->setHeaderData(8, Qt::Horizontal, "Видеопамять");
    hardware->setHeaderData(9, Qt::Horizontal, "Тип видеоадаптера");
    hardware->setHeaderData(10, Qt::Horizontal, "ОЗУ");
    hardware->setHeaderData(11, Qt::Horizontal, "ОЗУ Общее кол-во памяти");
    hardware->setHeaderData(12, Qt::Horizontal, "ОЗУ Тип DDR");
    hardware->setHeaderData(13, Qt::Horizontal, "ОЗУ Общее кол-во слотов");
    hardware->setHeaderData(14, Qt::Horizontal, "ОЗУ Использовано слотов");
    hardware->setHeaderData(15, Qt::Horizontal, "HDD & SSD");
    hardware->setHeaderData(16, Qt::Horizontal, "Общее объём памяти");
    hardware->setHeaderData(17, Qt::Horizontal, "Кол-во дисков");
    hardware->setHeaderData(18, Qt::Horizontal, "Монитор");
    hardware->setHeaderData(19, Qt::Horizontal, "Принтер");
    hardware->setHeaderData(20, Qt::Horizontal, "Наличие дисковода");
    hardware->setHeaderData(21, Qt::Horizontal, "Блок питания");

    // Установка заголовков таблицы repair
    repair->setHeaderData(0, Qt::Horizontal, "Дата заполнения карточки");
    repair->setHeaderData(1, Qt::Horizontal, "Дата ремонта");
    repair->setHeaderData(2, Qt::Horizontal, "Описание ремонта");
    repair->setHeaderData(3, Qt::Horizontal, "Специалист");

    // Установка заголовков таблицы movements
    movements->setHeaderData(0, Qt::Horizontal, "Дата заполнения карточки");
    movements->setHeaderData(1, Qt::Horizontal, "Прошлый пользователь");
    movements->setHeaderData(2, Qt::Horizontal, "Новый пользователь");
    movements->setHeaderData(3, Qt::Horizontal, "Прошлый отдел");
    movements->setHeaderData(4, Qt::Horizontal, "Новый отдел");
    movements->setHeaderData(5, Qt::Horizontal, "Заметки");
};


